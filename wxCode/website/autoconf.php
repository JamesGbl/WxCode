<?php $logsys_disabled=TRUE; require("globals.inc.php"); ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<?php
////////////////////////////////////////////////////////////////////////////////////////////
// Author: Francesco Montorsi
// Creation date: 29/10/2005
// RCS-ID: $Id: autoconf.php,v 1.13 2008/12/15 15:44:27 frm Exp $
// Notes: a practical guide to write configure.ac files for wxCode components
////////////////////////////////////////////////////////////////////////////////////////////
?>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-AU">
    <?php
        $filename="autoconf";
        $menuentry="Autoconf guide";
        $pagetitle="Autoconf guide";
        require("header.inc.php");
    ?>


    <!-- WXCODE AUTOCONF SECTION -->
    <?php write_h1("About autoconf", "autoconf", FALSE); ?>
    <p>Quoting <a href="http://www.gnu.org/software/autoconf/">autoconf project homepage</a>:<br/><br/>
        <em>Autoconf is an extensible package of m4 macros that produce shell scripts to automatically configure software source code packages. These scripts can adapt the packages to many kinds of UNIX-like systems without manual user intervention. Autoconf creates a configuration script for a package from a template file that lists the operating system features that the package can use, in the form of m4 macro calls.</em><br/><br/>
       where 'm4' is a 'macro processor'.
       For your needs as wxCode maintainer, autoconf is an utility which transforms your <tt>build/configure.ac</tt> file into <tt>configure</tt> which is a shell script which can be used by users of your components, together with <tt>Makefile.in</tt> (which is generated by bakefile), to build your component on a LOT of unix-based systems (also win32, using <a href="http://www.cygwin.com/">Cygwin</a>).</p>
    <p>The documentation for autoconf is available in many formats; you can browse it online
    <a href="http://www.gnu.org/software/autoconf/manual/html_node/autoconf.html">here</a>; it's quite big so I suggest you to use it as 'reference manual'...</p>



    <br/><?php write_h1("The 'configure.ac' syntax"); ?>
    <p>As written in the <a href="bakefile.php">wxCode bakefile guide</a>, you should use <tt>wxCode/build/autoconf/configure.ac</tt> as 'skeleton'.<br/>
    You can edit it with your favourite text editor (just be sure that when you process it with autoconf it has UNIX line endings; see below).</p>

    <p>Typically, if your component does not use any external library, you don't have to change anything
       into configure.ac except for the component name and version. However these are generic guidelines
       to keep in mind when editing configure.ac scripts:</p>
    <ul>
    <li>the <tt>AC_INIT</tt> macro must be the first macro of the script; you can put only comments before it</li>
    <li><tt>configure.ac</tt> files are simple shell scripts where all AC_*/AM_* macros are substituted; so you can use all you can usein bash scripts (see <a href="http://www.tldp.org/LDP/abs/html/">Advanced BASH scripting guide</a>)</li>
    <li>don't use the following syntax:<br/>
        <div style="text-align:center"><tt>if [ $MYVAR = "myvalue" ]; then do something; fi</tt></div>
        since the &quot;[ ]&quot; brackets are used to quote M4 strings; use instead:<br/>
        <div style="text-align:center"><tt>if [[ $MYVAR = "myvalue" ]]; then do something; fi</tt></div></li>
    <li>don't place comments inside macros:<br/>
        <div style="text-align:center">
        <tt>AC_MY_MACRO([arg1],         # my MISPLACED comment<br/>
                        [arg2],         # another wrong comment )</tt></div>
        just place the comments <em>below</em> or <em>above</em> the macros.</li>
    </ul>



    <br/><?php write_h1("What you need to change in your configure.ac"); ?>
    <p>The default <tt>configure.ac</tt> file for a wxCode component is quite simple; you can view it online
       <a href="http://wxcode.svn.sourceforge.net/viewvc/wxcode/trunk/wxCode/template/build/configure.ac?view=markup">here</a>.</p>

    <p>For a simple component, with no external libraries required, you'll probably only need to change:</p>
    <ul>
        <li>the AC_INIT line, with your real component name and version</li>
        <li>the WXCODE_OPTIONS line, excluding eventually options which you don't want to support (e.g. --disable-unicode)</li>
        <li>the WXCODE_CHECKS line, with the list of the wxWidgets libraries your program/library needs to link to</li>
    </ul>

    For more complex components, you'll need to write also configure checks for seamless configuration in the user's system...


    <br/><?php write_h1("Writing configure checks"); ?>
    <p>The configure scripts are used to detect the settings to generate the final makefile. One of the most important check to do is the one for external dependencies. The following are the main ways to perform this kind of checks:</p>
    <ol>

    <li>the <a href="http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_mono/autoconf.html#SEC77">AC_LINK_IFELSE</a> macro: <br/><br/>
    <pre class="sourcecode">
    dnl add the external library to the list of libraries which will be used for our test program
    LIBS="-llibtotest $LIBS"

    dnl check for the presence of 'libtotest'
    AC_MSG_CHECKING([for the libtotest availability])
    AC_LINK_IFELSE([
                    AC_LANG_PROGRAM([#include &lt;libtotest/header.h&gt;],
                                    [libtotest_object fakeinstance;])
                    ],
                    [LIBTOTEST_PRESENCE=1], [LIBTOTEST_PRESENCE=0])

    if test "$LIBTOTEST_PRESENCE" = "1"; then
        AC_MSG_RESULT([found])
    else
        AC_MSG_RESULT([not found !])
    fi
    </pre></li>

    <li>if you need to check for the presence of another wxCode component, then you can use the <tt>WXCODE_CHECKFOR_COMPONENT</tt>: <br/><br/>
    <pre class="sourcecode">
    dnl check for wxXml2 component
    WXCODE_CHECKFOR_COMPONENT([wxXml2], [wx/xml2.h], [wxxml2],
        [wxXml2Node faketest;], [WXXML2_PRESENCE=1], [WXXML2_PRESENCE=0])
    </pre><br/>
    As you can see in the <tt>wxCode/build/autoconf/wxcode.m4</tt> file, where this macro is defined, it's a simple 'shortcut' to the AC_LINK_IFELSE macro described above.</li>

    <li>if you need to check for a package which contains a '.pc' file, that is, a package that includes a <tt>pkg-config</tt> metadata file, then you can simply use the <tt>PKG_CHECK_MODULES</tt> macro. Look in <tt>man pkg-config</tt> page for more info about it. A typical sample is:<br/><br/>
    <pre class="sourcecode">
    dnl check for libtotest; if it cannot be found or it's too old, PKG_CHECK_MODULES
    dnl macro will automatically print an error message and exit the configure script.
    PKG_CHECK_MODULES([LIBXML2], [libxml-2.0 >= 2.6.19])

    dnl now add the variables LIBXML2_LIBS and LIBXML2_CFLAGS
    dnl (which have been created by PKG_CHECK_MODULES macro)
    dnl to our global LIBS and CFLAGS variables.
    LIBS="$LIBXML2_LIBS $LIBS"
    CFLAGS="$LIBXML2_CFLAGS $CFLAGS"
    </pre><br/>
    </li>
    </ol>




    <br/><?php write_h1("Processing 'configure.ac' to generate configure"); ?>
    <p>Before trying to process your configure.ac, be sure that:</p>
    <ol>
    <li>you ran <tt>bakefile_gen</tt> in your component's <tt>build</tt> folder;</li>
    <li>your <tt>configure.ac</tt>, <tt>config.sub</tt>, <tt>config.sub</tt>, <tt>Makefile.in</tt> have Unix line endings and that you have permission to execute them (you can use the <tt>dos2unix</tt> and <tt>chmod</tt> tools for this);</li>
    <li>you have Bakefile > 0.1.9.1 installed on your Unix system (bakefile 0.1.9.1 does not work well with autoconf due to a little bug);</li>
    <li>check that you have an automake version >= 1.9.6 (with the command <tt>aclocal --version</tt>) since aclocal 1.9.5 is affected by a bug in <em>m4_include</em> statements which prevents it from working correctly.<br/><br/>You can install the latest automake package from <a href="ftp://sources.redhat.com/pub/automake/">ftp://sources.redhat.com/pub/automake/</a>: untar the downloaded package and launch the usual <tt>./configure &amp;&amp; make &amp;&amp; make install</tt> command.</li>
    </ol>
    <p>If all points above have been checked, then you can run the script:</p>
    <div style="text-align:center"><tt>./acregen.sh</tt></div>

    <p>If you have a compiled and want to use a local build of bakefile,
    but have a system-wide bakefile package installed you will need to force <tt>aclocal</tt> to use the local build's bakefile*.m4 files.</p>
    <div style="text-align:center"><tt>./acregen.sh "--acdir=/path/to/bakefile-x.y.z/share/aclocal"</tt></div>

    <br/>
    <p>This little script will run <tt>aclocal</tt> (a little utility which collects all macro definitions used by your configure.ac), <tt>autoconf</tt> and then will move the <tt>configure</tt> script in the root folder of your component.</p>

    <p>The "configure" script can then be used by your component's users in this way:</p>

       <div style="text-align:center"><tt>./configure &amp;&amp; make &amp;&amp; make install</tt></div>

    <p>to build and install your component.</p>


    <br/><?php require("footer.inc.php"); ?>
</html>
