<?php $logsys_disabled=TRUE; require("globals.inc.php"); ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<?php
////////////////////////////////////////////////////////////////////////////////////////////
// Author: Francesco Montorsi
// Creation date: 29/10/2005
// RCS-ID: $Id: bakefile.php,v 1.15 2008/12/15 15:44:27 frm Exp $
// Notes: a practical guide to bakefile for wxCode components
////////////////////////////////////////////////////////////////////////////////////////////
?>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-AU">
    <?php
        $filename="bakefile";
        $pagetitle="Bakefile guide";
        $menuentry=writeMenuEntry("maintguide", "Maintainer guide");
        require("header.inc.php");
    ?>


    <!-- WXCODE BAKEFILE SECTION -->
    <?php write_h1("About Bakefile", "bakefile", FALSE); ?>
    <p>See <a href="http://bakefile.sourceforge.net">http://bakefile.sourceforge.net</a> for more info about Bakefile project.<br/>
    In short, bakefiles are template files from which makefiles for a lot of compilers
    can be generated (both for win32 compilers and unix ones).
    They are written in a subset of XML and thus you can modify them using any
    text editor (also, being in XML it means that you don't have to learn a new syntax
    when writing them!).</p>
    <p><a href="http://www.bakefile.org/doc/index.html">Bakefile documentation</a> is quite complete and
    you can find a nice introduction to it and to the usage of the <strong><em>wxpresets</em></strong>
    (some standard templates for building wx-based applications/libraries) in the wxWidgets distribution
    at <a href="http://cvs.wxwidgets.org/viewcvs.cgi/*checkout*/wxWidgets/build/bakefiles/wxpresets/bakefile_quickstart.txt?rev=HEAD&amp;content-type=text/plain">wx/build/bakefiles/wxpresets/bakefile_quickstart.txt</a>.</p>
    <p>Further documentation is available as comments inside the <a href="http://cvs.wxwidgets.org/viewcvs.cgi/*checkout*/wxWidgets/build/bakefiles/wxpresets/presets/wx.bkl?rev=HEAD&amp;content-type=text/plain">wx/build/bakefiles/wxpresets/presets/wx.bkl</a> file.</p>


    <br/><?php write_h1("Bakefilize your wxCode component"); ?>
    <p>To create a bakefile-based build system for your wxCode component, just follow these steps:</p>
    <ol>
    <li>if you already don't have it, install <a href="http://bakefile.sourceforge.net">Bakefile</a> on your
    system. You'll need it as you're going to use it to generate the makefiles. The users of your components
    however won't need it as they'll just use the makefiles you've generated for them.</li>

    <li>add the <tt>lib</tt> and <tt>build</tt> folder to your component's main folder;
       'lib' is where by default goes the library files generated by the makefiles; to avoid
       that CVS prunes it as empty folder you should copy the <tt>wxCode/template/lib/Readme.txt</tt>
       file inside it.</li>

    <li>copy these files from <tt>wxCode/template/build</tt><br/>
        <tt style="text-indent: 3em">
        mycomp.bkl<br/>
        Bakefiles.bkgen<br/>
        configure.ac<br/>
        config.sub<br/>
        config.guess<br/>
        install.sh<br/>
        acregen.sh<br/>
        </tt>
        into your component's <tt>build</tt> folder.</li>

    <li>edit with any plain text editor the <tt>Bakefiles.bkgen</tt> file to suit your needs;
        it's a template which tells to the utility <strong>bakefile_gen</strong> which formats
        of makefiles you want to regenerate when you run it; it's commented so that you should
        be able to edit it without many problems.</li>

    <li>edit with any plain text editor the <tt>mycomp.bkl</tt> to suit your component's requirements
        (renaming it to something more interesting like "your_component_name.bkl"!)
        This is the most important step since it requires that you know <em>how to use Bakefile</em>;
        however, for a standard component with a single sample program you should not have any problem
        in editing <tt>empty.bkl</tt> even if you have never used Bakefile before (just follow the comments)</li>

    <li>run the <tt>bakefile_gen</tt> command in your component's <tt>build</tt> folder</li>

    <li>edit the <tt>configure.ac</tt> file to add your Unix checks set the program name and version.
       That file will be used by the <tt>autoconf</tt> utility to create a <tt>configure</tt> script which
       will be used by Unix users to create the final makefile from Makefile.in
       (which is a makefile template generated by Bakefile).<br/>
       Since it's a Unix standard to have Makefile.in &amp; configure script directly in the root of the
       project to compile, the standard "Bakefiles.bkgen" file will tell bakefile_gen to put the
       "Makefile.in" file not in your "build" folder but one level up.<br/><br/>
       To create the "configure" script you must edit the "configure.ac" with a simple text editor
       (typically, if your component does not use any external library, you don't have to change anything
       into configure.ac except for the component name, version, and the list of wxWidgets libraries it needs
        to link to, in the <tt>WXCODE_CHECKS</tt> macro) and then use the <tt>acregen.sh</tt> script.
       See <a href="autoconf.php">wxCode autoconf guide</a> for more info.</li>

    <li>run the makefiles to test them.<br/>
        The following are the files you should have in your component's packages
        to support all major compilers:<br/>
        <br/>
        <tt>build\makefile.vc</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for MSVC (nmake)<br/>
        <tt>build\makefile.gcc</tt>&nbsp;&nbsp;&nbsp;&nbsp;for Mingw (mingw32-make)<br/>
        <tt>build\makefile.wat</tt>&nbsp;&nbsp;&nbsp;&nbsp;for Watcom (wmake)<br/>
        <tt>build\makefile.bcc</tt>&nbsp;&nbsp;&nbsp;&nbsp;for Borland (make)<br/>
        <br/>
        <tt>Makefile.in</tt>&nbsp;&nbsp;&nbsp;&nbsp;used by configure script to provide the "Makefile", under Unix<br/>
        <tt>configure</tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configures the Makefile.in doing the right substitutions and creates "Makefile", under Unix<br/>
        <br/>
        additionally wxCode default settings will tell to bakefile_gen to generate also the DSW/DSP project files for MSVC6 and the SLN/VCPROJ project files for MSVS2005... you can adjust the formats you want to be generated editing yours <tt>Bakefiles.bkgen</tt>.</li>
    </ol>


    <br/><?php write_h1("Learn more about wxCode and wxWidgets Bakefile presets"); ?>
    <p>To make sure all components use the same wxWidgets presets for generating their build systems,
    the wxCode repository also contains the very latest version of the wxWidgets presets.
    That is, all bakefile magic for building your wx-based applications/libs is
    contained in the wxCode/build/bakefiles/preset folder.</p>

    <p>Besides, all wxCode bakefiles are heavily commented thus my suggestion is, if you're already
    experienced with Bakefile, to open with any plain text editor the
    <tt>wxCode/build/bakefiles/presets/templates.bkl</tt> file and look at it to understand how wxCode
    presets work. It's rather simple and wxCode presets are a good set of files you can use to learn
    more in details the Bakefile build system.</p>


    <br/><?php write_h1("Getting support for bakefile"); ?>
    <p>If you need further info on the usage of wxCode bakefiles, you should write a message describing your problem/doubt on the <a href="http://news.gmane.org/gmane.comp.lib.wxwidgets.wxcode.user">wxCode mailing list</a> or you can contact directly the bakefile maintainer for wxCode at <tt>frm@nospam@ users.sourceforge.net</tt> (remove the nospam part).</p>


    <br/><?php require("footer.inc.php"); ?>
</html>
